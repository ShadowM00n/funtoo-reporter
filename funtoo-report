#!perl

## Author : Joshua S. Day (haxmeister)
## Purpose : A anonymous funtoo data reporting tool
##
## With code from: Palica, and Tom Ryder
##
## Special thanks to ShadowMoon for his continued critique of this perl code
##
## written with the following additional packages
##
## from funtoo repository:
## dev-perl/JSON-2.900.0
## dev-perl/Search-Elasticsearch-6.00
##
## also from Github
## The accompanying "Report" module placed in
## modules folder relative to the report script
## this is until the whole thing is properly packaged for
## distribution on funtoo or wherever and the module can go
## in a more proper place

use strict;                 #core
use warnings;               #core
use JSON;                   #cpan
use Term::ANSIColor;        #core
use lib "$ENV{PWD}/lib";    #core
use Funtoo::Report;         #GIT
use HTTP::Tiny;             #core

my %es_config = (
    node  => 'http://elk2.liguros.net:9200',
    index => Funtoo::Report::report_time('short'),
    type  => 'report');


## let's parse the command line args
if (@ARGV) {
    if ( $ARGV[0] eq 'show-json' ) {

        # get the entire report
        my %report = report_from_config();

        # generate a json object that we can use to convert to json
        my $json = JSON->new->allow_nonref;

        # send the report to the json object to be encoded to json
        # and print the results with proper indents (pretty)
        my $json_pretty = $json->pretty->encode( \%report );
        print $json_pretty;

    }

    if ( $ARGV[0] eq 'send' ) {

        # get the entire report
        my %report = report_from_config();
        Funtoo::Report::send_report(\%report, \%es_config);
    }

    # for people who ask for help
    if ( $ARGV[0] eq 'help' ) {
        show_help();
    }

    # to update/replace the config file
    if ( $ARGV[0] eq 'config-update' ) {
        Funtoo::Report::config_update();
    }
}

# for people who don't ask for help
else {
    show_help();
}

## if you don't understand this function.. you need to just close this
## file now before you mess something up
sub show_help {
    print color('bold');
    print "\n\nFuntoo anonymous data reporting tool usage: \n\n";

    print color('bold blue');
    print "funtoo-report send";
    print color('reset');
    print "\t\t Send the report to funtoo's data collection\n";

    print color('bold blue');
    print "funtoo-report show-json";
    print color('reset');
    print " \t Show the output that will be sent, in JSON format\n";

    print color('bold blue');
    print "funtoo-report config-update";
    print color('reset');
    print " \t Generate, reconfigure or update the config file";
    print color('reset') . " /etc/funtoo-report.conf\n";

    print color('bold blue');
    print "funtoo-report help";
    print color('reset');
    print " \t\t Show this help list\n";

    print color('bold');
    print "\nOutput can be ommitted by modifying ";
    print color('reset');
    print "/etc/funtoo-report.conf ";
    print color('bold');
    print "manually or using ";
    print color('reset');
    print "funtoo-report config-update\n\n";
    print color('reset');
    return 0;
}

## let's read the config file and generate the report
sub report_from_config {
    my %config = Funtoo::Report::user_config();  # fetch/parse the user config
    my %hash;

    # look for a UUID in the config file and
    # if it's not there, add one
    if ( exists $config{'UUID'} ) {
        $es_config{'id'} = $config{'UUID'};
    }
    else {
        $es_config{'id'} = Funtoo::Report::add_uuid();
    }

    # let's load a hash with the possible config file options as keys
    # and the values will be a pointer to the function that generates
    # the associated information
    my %sections = (
        'boot-dir-info'  => \&Funtoo::Report::get_boot_dir_info,
        'kernel-info'    => \&Funtoo::Report::get_kernel_info,
        'kit-info'       => \&Funtoo::Report::get_kit_info,
        'profile-info'   => \&Funtoo::Report::get_profile_info,
        'version-info'   => \&Funtoo::Report::get_version_info,
        'world-info'     => \&Funtoo::Report::get_world_info,
        'installed-pkgs' => \&Funtoo::Report::get_all_installed_pkg,
        'hardware-info'  => \&Funtoo::Report::get_hardware_info,

    );

    # check each key and see if it's in the config file
    for my $report ( sort keys %sections ) {
        exists $config{$report} or next;

        # does the key have a 'y' in the config?
        $config{$report} eq 'y' or next;

        # if so, call the function and add the returned
        # hash table to the report
        $hash{$report} = $sections{$report}->();
    }
    ## adding UUID to the body of the report
    #
    $hash{'funtoo-report'}{'UUID'} = $config{'UUID'};

    ## adding timestamp to report
    #
    $hash{'timestamp'} = Funtoo::Report::report_time('long');

    ## adding version number to report
    #
    $hash{'funtoo-report'}{'version'} = Funtoo::Report::version();

    return %hash;
}
